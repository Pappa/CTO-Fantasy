{"ast":null,"code":"import Phaser from \"phaser\";\nimport { Card } from \"../game-objects/Card\";\nimport { LinearStateMachine } from \"../classes/states/LinearStateMachine\";\nimport { SprintEventState } from \"../classes/states/sprint/SprintEventState\";\nimport { SprintPlanningState } from \"../classes/states/sprint/SprintPlanningState\";\nimport * as theme from \"../theme\";\nimport { average } from \"../utils/number\";\nimport { randomInt } from \"../utils/random\";\nconst SPRINT_LENGTH = 10;\nexport class SprintScene extends Phaser.Scene {\n  constructor() {\n    super(\"SprintScene\");\n  }\n\n  init() {}\n\n  preload() {}\n\n  create({\n    team,\n    events = [],\n    onClose\n  }) {\n    this.team = team;\n    this.events = events;\n    this.onClose = onClose;\n    this.updateSprintNumber();\n    this.setCommitment();\n    this.createComponents();\n    this.createEvents();\n  }\n\n  update(time, delta) {\n    if (!this.events.length) {//this.onClose();\n    }\n  }\n\n  updateSprintNumber() {\n    this.sprintNumber = this.registry.inc(\"sprintNumber\").get(\"sprintNumber\");\n    console.log(\"this.sprintNumber\", this.sprintNumber);\n  }\n\n  createComponents() {\n    this.header = this.add.text(400, 15, `Sprint ${this.sprintNumber}`, theme.h1).setOrigin(0.5, 0);\n    this.eventDialog = this.add.dom(400, 300).createFromCache(\"event\").setOrigin(0.5).setVisible(false);\n    this.card = this.add.existing(new Card(this, 400, 150));\n  }\n\n  createEvents() {\n    this.machine = new LinearStateMachine();\n    this.events = [new SprintPlanningState(this.machine, this.card, this.commitment, this.handleEvents)];\n    const randomEvents = this.getRandomSprintEvents();\n    this.events.push(...randomEvents);\n    this.machine.add(this.events);\n    this.machine.next();\n  }\n\n  handleEvents() {\n    this.machine.next(); // probably a setTimeout bug here\n    // move to update() ?\n\n    if (!this.machine.currentState) {\n      const velocity = this.calculateVelocity();\n      this.onClose();\n    }\n  }\n\n  getRandomSprintEvents() {\n    return Array(randomInt(1, 3)).fill(null).map(() => ({\n      text: \"Do you want to do A or B?\",\n      A: () => {\n        this.handleEvents();\n      },\n      B: () => {\n        this.handleEvents();\n      }\n    })).map(ev => new SprintEventState(this.machine, this.eventDialog, ev));\n  }\n\n  setCommitment() {\n    this.commitment = randomInt(30, 60);\n  }\n\n  calculateResults() {\n    this.velocity = this.calculateVelocity();\n  }\n\n  calculateVelocity() {\n    const skills = this.team.map(member => member.skill);\n    const av = average(skills);\n    const velocity = Math.floor(av * this.team.length * SPRINT_LENGTH);\n    console.log(skills, av, velocity);\n    return velocity;\n  }\n\n}","map":{"version":3,"sources":["/Users/robhill/Projects/Pappa/cto-fantasy/src/modules/game/cto-fantasy/scenes/SprintScene.js"],"names":["Phaser","Card","LinearStateMachine","SprintEventState","SprintPlanningState","theme","average","randomInt","SPRINT_LENGTH","SprintScene","Scene","constructor","init","preload","create","team","events","onClose","updateSprintNumber","setCommitment","createComponents","createEvents","update","time","delta","length","sprintNumber","registry","inc","get","console","log","header","add","text","h1","setOrigin","eventDialog","dom","createFromCache","setVisible","card","existing","machine","commitment","handleEvents","randomEvents","getRandomSprintEvents","push","next","currentState","velocity","calculateVelocity","Array","fill","map","A","B","ev","calculateResults","skills","member","skill","av","Math","floor"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport { Card } from \"../game-objects/Card\";\nimport { LinearStateMachine } from \"../classes/states/LinearStateMachine\";\nimport { SprintEventState } from \"../classes/states/sprint/SprintEventState\";\nimport { SprintPlanningState } from \"../classes/states/sprint/SprintPlanningState\";\nimport * as theme from \"../theme\";\nimport { average } from \"../utils/number\";\nimport { randomInt } from \"../utils/random\";\n\nconst SPRINT_LENGTH = 10;\n\nexport class SprintScene extends Phaser.Scene {\n  constructor() {\n    super(\"SprintScene\");\n  }\n\n  init() {}\n\n  preload() {}\n\n  create({ team, events = [], onClose }) {\n    this.team = team;\n    this.events = events;\n    this.onClose = onClose;\n    this.updateSprintNumber();\n    this.setCommitment();\n    this.createComponents();\n    this.createEvents();\n  }\n\n  update(time, delta) {\n    if (!this.events.length) {\n      //this.onClose();\n    }\n  }\n\n  updateSprintNumber() {\n    this.sprintNumber = this.registry.inc(\"sprintNumber\").get(\"sprintNumber\");\n    console.log(\"this.sprintNumber\", this.sprintNumber);\n  }\n\n  createComponents() {\n    this.header = this.add\n      .text(400, 15, `Sprint ${this.sprintNumber}`, theme.h1)\n      .setOrigin(0.5, 0);\n    this.eventDialog = this.add\n      .dom(400, 300)\n      .createFromCache(\"event\")\n      .setOrigin(0.5)\n      .setVisible(false);\n    this.card = this.add.existing(new Card(this, 400, 150));\n  }\n\n  createEvents() {\n    this.machine = new LinearStateMachine();\n    this.events = [\n      new SprintPlanningState(\n        this.machine,\n        this.card,\n        this.commitment,\n        this.handleEvents\n      ),\n    ];\n    const randomEvents = this.getRandomSprintEvents();\n    this.events.push(...randomEvents);\n    this.machine.add(this.events);\n    this.machine.next();\n  }\n\n  handleEvents() {\n    this.machine.next();\n    // probably a setTimeout bug here\n    // move to update() ?\n    if (!this.machine.currentState) {\n      const velocity = this.calculateVelocity();\n      this.onClose();\n    }\n  }\n\n  getRandomSprintEvents() {\n    return Array(randomInt(1, 3))\n      .fill(null)\n      .map(() => ({\n        text: \"Do you want to do A or B?\",\n        A: () => {\n          this.handleEvents();\n        },\n        B: () => {\n          this.handleEvents();\n        },\n      }))\n      .map((ev) => new SprintEventState(this.machine, this.eventDialog, ev));\n  }\n\n  setCommitment() {\n    this.commitment = randomInt(30, 60);\n  }\n\n  calculateResults() {\n    this.velocity = this.calculateVelocity();\n  }\n\n  calculateVelocity() {\n    const skills = this.team.map((member) => member.skill);\n    const av = average(skills);\n    const velocity = Math.floor(av * this.team.length * SPRINT_LENGTH);\n    console.log(skills, av, velocity);\n    return velocity;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}