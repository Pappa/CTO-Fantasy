{"ast":null,"code":"import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { randomInt } from \"../utils/random\";\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.budget = randomInt(50000, 100000);\n  } // load assets\n\n\n  preload() {// this.load.image(\"background\", \"assets/images/background-city.png\");\n    // this.load.audio(\"treeAudio\", \"assets/audio/arbol.mp3\");\n  } // executed once, after assets were loaded\n\n\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n    this.header = this.add.text(0, 15, \"Header\", {\n      font: \"14px Open Sans\",\n      fill: \"#000000\"\n    });\n    this.meetTheTeam();\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize).fill(null).map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) => Array(length).fill(null).map(() => new T());\n\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  meetTheTeam() {}\n\n}","map":{"version":3,"sources":["/Users/robhill/Projects/Pappa/cto-fantasy/src/modules/game/cto-fantasy/scenes/MainScene.js"],"names":["Phaser","Dev","ProductOwner","ScrumMaster","Tester","randomInt","MainScene","Scene","constructor","init","createStartingEmployees","createStartingCandidates","budget","preload","create","console","log","team","candidates","header","add","text","font","fill","meetTheTeam","update","time","delta","teamSize","registry","get","startingTeamSize","Array","map","arrayofType","T","length","scrumMasters","testers","productOwners","devs","flat"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,GAAT,EAAcC,YAAd,EAA4BC,WAA5B,EAAyCC,MAAzC,QAAuD,qBAAvD;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,OAAO,MAAMC,SAAN,SAAwBN,MAAM,CAACO,KAA/B,CAAqC;AAC1CC,EAAAA,WAAW,GAAG;AACZ,UAAM,WAAN;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,SAAKC,uBAAL;AACA,SAAKC,wBAAL;AACA,SAAKC,MAAL,GAAcP,SAAS,CAAC,KAAD,EAAQ,MAAR,CAAvB;AACD,GATyC,CAW1C;;;AACAQ,EAAAA,OAAO,GAAG,CACR;AACA;AACD,GAfyC,CAiB1C;;;AACAC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,IAAjB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,UAAjB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,MAAjB;AACA,SAAKO,MAAL,GAAc,KAAKC,GAAL,CAASC,IAAT,CAAc,CAAd,EAAiB,EAAjB,EAAqB,QAArB,EAA+B;AAC3CC,MAAAA,IAAI,EAAE,gBADqC;AAE3CC,MAAAA,IAAI,EAAE;AAFqC,KAA/B,CAAd;AAIA,SAAKC,WAAL;AACD;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc,CAAE;;AAEtBjB,EAAAA,uBAAuB,GAAG;AACxB,UAAMkB,QAAQ,GAAG,KAAKC,QAAL,CAAcC,GAAd,CAAkB,UAAlB,EAA8BC,gBAA/C;AACA,SAAKd,IAAL,GAAYe,KAAK,CAACJ,QAAD,CAAL,CACTL,IADS,CACJ,IADI,EAETU,GAFS,CAEL,MAAM,IAAIhC,GAAJ,EAFD,CAAZ;AAGD;;AAEDU,EAAAA,wBAAwB,GAAG;AACzB,UAAMuB,WAAW,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAClBJ,KAAK,CAACI,MAAD,CAAL,CACGb,IADH,CACQ,IADR,EAEGU,GAFH,CAEO,MAAM,IAAIE,CAAJ,EAFb,CADF;;AAIA,UAAME,YAAY,GAAGH,WAAW,CAAC/B,WAAD,EAAcE,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAvB,CAAhC;AACA,UAAMiC,OAAO,GAAGJ,WAAW,CAAC9B,MAAD,EAASC,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAlB,CAA3B;AACA,UAAMkC,aAAa,GAAGL,WAAW,CAAChC,YAAD,EAAeG,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAjC;AACA,UAAMmC,IAAI,GAAGN,WAAW,CAACjC,GAAD,EAAMI,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAf,CAAxB;AACA,SAAKa,UAAL,GAAkB,CAACmB,YAAD,EAAeC,OAAf,EAAwBC,aAAxB,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAlB;AACD;;AAEDjB,EAAAA,WAAW,GAAG,CAAE;;AAlD0B","sourcesContent":["import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { randomInt } from \"../utils/random\";\n\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.budget = randomInt(50000, 100000);\n  }\n\n  // load assets\n  preload() {\n    // this.load.image(\"background\", \"assets/images/background-city.png\");\n    // this.load.audio(\"treeAudio\", \"assets/audio/arbol.mp3\");\n  }\n\n  // executed once, after assets were loaded\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n    this.header = this.add.text(0, 15, \"Header\", {\n      font: \"14px Open Sans\",\n      fill: \"#000000\",\n    });\n    this.meetTheTeam();\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize)\n      .fill(null)\n      .map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) =>\n      Array(length)\n        .fill(null)\n        .map(() => new T());\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  meetTheTeam() {}\n}\n"]},"metadata":{},"sourceType":"module"}