{"ast":null,"code":"import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { Card } from \"../game-objects/Card\";\nimport { randomInt } from \"../utils/random\";\nimport * as theme from \"../theme\";\nimport { LinearStory } from \"../classes/LinearStory\";\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.createLinearStory();\n    this.budget = randomInt(50000, 100000);\n    this.state = MainScene.START;\n    this.company = this.registry.get(\"company\");\n  } // executed once, after assets were loaded\n\n\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n    this.header = this.add.text(15, 550, this.company.name, theme.h1).setOrigin(0);\n\n    if (this.state === MainScene.START) {\n      this.scene.launch(\"TeamScene\", {\n        team: this.team,\n        onClose: () => {}\n      });\n    }\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize).fill(null).map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) => Array(length).fill(null).map(() => new T());\n\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  createLinearStory() {\n    const story = new LinearStory();\n  }\n\n}\nMainScene.START = \"start\";","map":{"version":3,"sources":["/Users/robhill/Projects/Pappa/cto-fantasy/src/modules/game/cto-fantasy/scenes/MainScene.js"],"names":["Phaser","Dev","ProductOwner","ScrumMaster","Tester","Card","randomInt","theme","LinearStory","MainScene","Scene","constructor","init","createStartingEmployees","createStartingCandidates","createLinearStory","budget","state","START","company","registry","get","create","console","log","team","candidates","header","add","text","name","h1","setOrigin","scene","launch","onClose","update","time","delta","teamSize","startingTeamSize","Array","fill","map","arrayofType","T","length","scrumMasters","testers","productOwners","devs","flat","story"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { Card } from \"../game-objects/Card\";\nimport { randomInt } from \"../utils/random\";\nimport * as theme from \"../theme\";\nimport { LinearStory } from \"../classes/LinearStory\";\n\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.createLinearStory();\n    this.budget = randomInt(50000, 100000);\n    this.state = MainScene.START;\n    this.company = this.registry.get(\"company\");\n  }\n\n  // executed once, after assets were loaded\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n\n    this.header = this.add\n      .text(15, 550, this.company.name, theme.h1)\n      .setOrigin(0);\n\n    if (this.state === MainScene.START) {\n      this.scene.launch(\"TeamScene\", { team: this.team, onClose: () => {} });\n    }\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize)\n      .fill(null)\n      .map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) =>\n      Array(length)\n        .fill(null)\n        .map(() => new T());\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  createLinearStory() {\n    const story = new LinearStory();\n  }\n}\n\nMainScene.START = \"start\";\n"]},"metadata":{},"sourceType":"module"}