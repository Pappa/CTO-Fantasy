{"ast":null,"code":"import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { randomInt } from \"../utils/random\";\nimport * as theme from \"../theme\";\nimport { LinearFSM } from \"../classes/LinearFSM\";\nimport { MeetTheTeamState } from \"../classes/states/MeetTheTeamState\";\nimport { HiringState } from \"../classes/states/HiringState\";\nimport { SprintState } from \"../classes/states/SprintState\";\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.createLinearStory();\n    this.budget = randomInt(50000, 100000);\n    this.state = MainScene.START;\n    this.company = this.registry.get(\"company\");\n  } // executed once, after assets were loaded\n\n\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n    this.office = this.add.image(400, 300, \"office\").setOrigin(0.5);\n    this.header = this.add.text(15, 550, this.company.name, theme.h1).setOrigin(0); // if (this.state === MainScene.START) {\n    //   this.scene.launch(\"TeamScene\", { team: this.team, onClose: () => {} });\n    // }\n\n    this.fsm.next();\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize).fill(null).map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) => Array(length).fill(null).map(() => new T());\n\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  createLinearStory() {\n    this.fsm = new LinearFSM();\n    const states = [new MeetTheTeamState(this.fsm, this.scene, this.team), new HiringState(this.fsm, this.scene, this.candidates), new SprintState(this.fsm, this.scene, this.team)];\n    this.fsm.add(states);\n  }\n\n}\nMainScene.START = \"start\";","map":{"version":3,"sources":["/Users/robhill/Projects/Pappa/cto-fantasy/src/modules/game/cto-fantasy/scenes/MainScene.js"],"names":["Phaser","Dev","ProductOwner","ScrumMaster","Tester","randomInt","theme","LinearFSM","MeetTheTeamState","HiringState","SprintState","MainScene","Scene","constructor","init","createStartingEmployees","createStartingCandidates","createLinearStory","budget","state","START","company","registry","get","create","console","log","team","candidates","office","add","image","setOrigin","header","text","name","h1","fsm","next","update","time","delta","teamSize","startingTeamSize","Array","fill","map","arrayofType","T","length","scrumMasters","testers","productOwners","devs","flat","states","scene"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { randomInt } from \"../utils/random\";\nimport * as theme from \"../theme\";\nimport { LinearFSM } from \"../classes/LinearFSM\";\nimport { MeetTheTeamState } from \"../classes/states/MeetTheTeamState\";\nimport { HiringState } from \"../classes/states/HiringState\";\nimport { SprintState } from \"../classes/states/SprintState\";\n\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.createLinearStory();\n    this.budget = randomInt(50000, 100000);\n    this.state = MainScene.START;\n    this.company = this.registry.get(\"company\");\n  }\n\n  // executed once, after assets were loaded\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n\n    this.office = this.add.image(400, 300, \"office\").setOrigin(0.5);\n\n    this.header = this.add\n      .text(15, 550, this.company.name, theme.h1)\n      .setOrigin(0);\n\n    // if (this.state === MainScene.START) {\n    //   this.scene.launch(\"TeamScene\", { team: this.team, onClose: () => {} });\n    // }\n    this.fsm.next();\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize)\n      .fill(null)\n      .map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) =>\n      Array(length)\n        .fill(null)\n        .map(() => new T());\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  createLinearStory() {\n    this.fsm = new LinearFSM();\n    const states = [\n      new MeetTheTeamState(this.fsm, this.scene, this.team),\n      new HiringState(this.fsm, this.scene, this.candidates),\n      new SprintState(this.fsm, this.scene, this.team),\n    ];\n    this.fsm.add(states);\n  }\n}\n\nMainScene.START = \"start\";\n"]},"metadata":{},"sourceType":"module"}