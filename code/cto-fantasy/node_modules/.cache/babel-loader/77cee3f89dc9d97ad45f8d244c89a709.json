{"ast":null,"code":"import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { randomInt } from \"../utils/random\";\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.budget = randomInt(50000, 100000);\n    this.settings = this.registry.get(\"settings\");\n  } // load assets\n\n\n  preload() {// this.load.image(\"background\", \"assets/images/background-city.png\");\n    // this.load.audio(\"treeAudio\", \"assets/audio/arbol.mp3\");\n  } // executed once, after assets were loaded\n\n\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n    this.createComponents();\n    this.meetTheTeam();\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize).fill(null).map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) => Array(length).fill(null).map(() => new T());\n\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  createComponents() {\n    this.header = this.add.text(0, 15, \" \", {\n      font: \"24px Open Sans\",\n      fill: \"#ffffff\"\n    }).setOrigin(0.5, 0);\n  }\n\n  meetTheTeam() {\n    const name = this.registry.get(\"name\");\n    const company = this.registry.get(\"company\");\n    this.header.setText(`Welcome to ${company.name} ${name}! Come and meet the team.`);\n  }\n\n}","map":{"version":3,"sources":["/Users/robhill/Projects/Pappa/cto-fantasy/src/modules/game/cto-fantasy/scenes/MainScene.js"],"names":["Phaser","Dev","ProductOwner","ScrumMaster","Tester","randomInt","MainScene","Scene","constructor","init","createStartingEmployees","createStartingCandidates","budget","settings","registry","get","preload","create","console","log","team","candidates","createComponents","meetTheTeam","update","time","delta","teamSize","startingTeamSize","Array","fill","map","arrayofType","T","length","scrumMasters","testers","productOwners","devs","flat","header","add","text","font","setOrigin","name","company","setText"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,GAAT,EAAcC,YAAd,EAA4BC,WAA5B,EAAyCC,MAAzC,QAAuD,qBAAvD;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,OAAO,MAAMC,SAAN,SAAwBN,MAAM,CAACO,KAA/B,CAAqC;AAC1CC,EAAAA,WAAW,GAAG;AACZ,UAAM,WAAN;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,SAAKC,uBAAL;AACA,SAAKC,wBAAL;AACA,SAAKC,MAAL,GAAcP,SAAS,CAAC,KAAD,EAAQ,MAAR,CAAvB;AACA,SAAKQ,QAAL,GAAgB,KAAKC,QAAL,CAAcC,GAAd,CAAkB,UAAlB,CAAhB;AACD,GAVyC,CAY1C;;;AACAC,EAAAA,OAAO,GAAG,CACR;AACA;AACD,GAhByC,CAkB1C;;;AACAC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,IAAjB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,UAAjB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,MAAjB;AACA,SAAKU,gBAAL;AACA,SAAKC,WAAL;AACD;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc,CAAE;;AAEtBhB,EAAAA,uBAAuB,GAAG;AACxB,UAAMiB,QAAQ,GAAG,KAAKb,QAAL,CAAcC,GAAd,CAAkB,UAAlB,EAA8Ba,gBAA/C;AACA,SAAKR,IAAL,GAAYS,KAAK,CAACF,QAAD,CAAL,CACTG,IADS,CACJ,IADI,EAETC,GAFS,CAEL,MAAM,IAAI9B,GAAJ,EAFD,CAAZ;AAGD;;AAEDU,EAAAA,wBAAwB,GAAG;AACzB,UAAMqB,WAAW,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAClBL,KAAK,CAACK,MAAD,CAAL,CACGJ,IADH,CACQ,IADR,EAEGC,GAFH,CAEO,MAAM,IAAIE,CAAJ,EAFb,CADF;;AAIA,UAAME,YAAY,GAAGH,WAAW,CAAC7B,WAAD,EAAcE,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAvB,CAAhC;AACA,UAAM+B,OAAO,GAAGJ,WAAW,CAAC5B,MAAD,EAASC,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAlB,CAA3B;AACA,UAAMgC,aAAa,GAAGL,WAAW,CAAC9B,YAAD,EAAeG,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAjC;AACA,UAAMiC,IAAI,GAAGN,WAAW,CAAC/B,GAAD,EAAMI,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAf,CAAxB;AACA,SAAKgB,UAAL,GAAkB,CAACc,YAAD,EAAeC,OAAf,EAAwBC,aAAxB,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAlB;AACD;;AAEDjB,EAAAA,gBAAgB,GAAG;AACjB,SAAKkB,MAAL,GAAc,KAAKC,GAAL,CACXC,IADW,CACN,CADM,EACH,EADG,EACC,GADD,EACM;AAChBC,MAAAA,IAAI,EAAE,gBADU;AAEhBb,MAAAA,IAAI,EAAE;AAFU,KADN,EAKXc,SALW,CAKD,GALC,EAKI,CALJ,CAAd;AAMD;;AAEDrB,EAAAA,WAAW,GAAG;AACZ,UAAMsB,IAAI,GAAG,KAAK/B,QAAL,CAAcC,GAAd,CAAkB,MAAlB,CAAb;AACA,UAAM+B,OAAO,GAAG,KAAKhC,QAAL,CAAcC,GAAd,CAAkB,SAAlB,CAAhB;AACA,SAAKyB,MAAL,CAAYO,OAAZ,CACG,cAAaD,OAAO,CAACD,IAAK,IAAGA,IAAK,2BADrC;AAGD;;AA/DyC","sourcesContent":["import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { randomInt } from \"../utils/random\";\n\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.budget = randomInt(50000, 100000);\n    this.settings = this.registry.get(\"settings\");\n  }\n\n  // load assets\n  preload() {\n    // this.load.image(\"background\", \"assets/images/background-city.png\");\n    // this.load.audio(\"treeAudio\", \"assets/audio/arbol.mp3\");\n  }\n\n  // executed once, after assets were loaded\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n    this.createComponents();\n    this.meetTheTeam();\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize)\n      .fill(null)\n      .map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) =>\n      Array(length)\n        .fill(null)\n        .map(() => new T());\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  createComponents() {\n    this.header = this.add\n      .text(0, 15, \" \", {\n        font: \"24px Open Sans\",\n        fill: \"#ffffff\",\n      })\n      .setOrigin(0.5, 0);\n  }\n\n  meetTheTeam() {\n    const name = this.registry.get(\"name\");\n    const company = this.registry.get(\"company\");\n    this.header.setText(\n      `Welcome to ${company.name} ${name}! Come and meet the team.`\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}