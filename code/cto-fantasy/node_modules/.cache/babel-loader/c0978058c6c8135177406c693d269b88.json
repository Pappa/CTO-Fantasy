{"ast":null,"code":"import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { Card } from \"../game-objects/Card\";\nimport { randomInt } from \"../utils/random\";\nimport * as theme from \"../theme\";\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.budget = randomInt(50000, 100000);\n  } // load assets\n\n\n  preload() {// this.load.image(\"background\", \"assets/images/background-city.png\");\n    // this.load.audio(\"treeAudio\", \"assets/audio/arbol.mp3\");\n  } // executed once, after assets were loaded\n\n\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n    this.createComponents();\n    this.meetTheTeam();\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize).fill(null).map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) => Array(length).fill(null).map(() => new T());\n\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  createComponents() {\n    this.header = this.add.text(400, 15, \" \", theme.h1).setOrigin(0.5, 0);\n  }\n\n  meetTheTeam() {\n    const name = this.registry.get(\"name\");\n    const company = this.registry.get(\"company\");\n    this.header.setText(`Welcome to ${company.name} ${name}! Come and meet the team.`);\n    this.teamObjects = this.team.map((member, idx) => {\n      const x = -50 + (idx + 1) * 175;\n      return this.add.existing(new Card(this, x, 150, {\n        title: member.name,\n        text: \" \"\n      }));\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/robhill/Projects/Pappa/cto-fantasy/src/modules/game/cto-fantasy/scenes/MainScene.js"],"names":["Phaser","Dev","ProductOwner","ScrumMaster","Tester","Card","randomInt","theme","MainScene","Scene","constructor","init","createStartingEmployees","createStartingCandidates","budget","preload","create","console","log","team","candidates","createComponents","meetTheTeam","update","time","delta","teamSize","registry","get","startingTeamSize","Array","fill","map","arrayofType","T","length","scrumMasters","testers","productOwners","devs","flat","header","add","text","h1","setOrigin","name","company","setText","teamObjects","member","idx","x","existing","title"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { Card } from \"../game-objects/Card\";\nimport { randomInt } from \"../utils/random\";\nimport * as theme from \"../theme\";\n\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.createStartingCandidates();\n    this.budget = randomInt(50000, 100000);\n  }\n\n  // load assets\n  preload() {\n    // this.load.image(\"background\", \"assets/images/background-city.png\");\n    // this.load.audio(\"treeAudio\", \"assets/audio/arbol.mp3\");\n  }\n\n  // executed once, after assets were loaded\n  create() {\n    console.log(this.team);\n    console.log(this.candidates);\n    console.log(this.budget);\n    this.createComponents();\n    this.meetTheTeam();\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.team = Array(teamSize)\n      .fill(null)\n      .map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const arrayofType = (T, length) =>\n      Array(length)\n        .fill(null)\n        .map(() => new T());\n    const scrumMasters = arrayofType(ScrumMaster, randomInt(1, 2));\n    const testers = arrayofType(Tester, randomInt(1, 2));\n    const productOwners = arrayofType(ProductOwner, randomInt(1, 2));\n    const devs = arrayofType(Dev, randomInt(1, 2));\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n  }\n\n  createComponents() {\n    this.header = this.add.text(400, 15, \" \", theme.h1).setOrigin(0.5, 0);\n  }\n\n  meetTheTeam() {\n    const name = this.registry.get(\"name\");\n    const company = this.registry.get(\"company\");\n    this.header.setText(\n      `Welcome to ${company.name} ${name}! Come and meet the team.`\n    );\n\n    this.teamObjects = this.team.map((member, idx) => {\n      const x = -50 + (idx + 1) * 175;\n      return this.add.existing(\n        new Card(this, x, 150, {\n          title: member.name,\n          text: \" \",\n        })\n      );\n    }, this);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}