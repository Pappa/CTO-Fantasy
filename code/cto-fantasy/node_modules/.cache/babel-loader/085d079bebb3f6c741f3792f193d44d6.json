{"ast":null,"code":"import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { randomInt } from \"../utils/random\";\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.candidates = this.createStartingCandidates();\n  } // load assets\n\n\n  preload() {// this.load.image(\"background\", \"assets/images/background-city.png\");\n    // this.load.audio(\"treeAudio\", \"assets/audio/arbol.mp3\");\n  } // executed once, after assets were loaded\n\n\n  create() {\n    console.log(this.employees);\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.employees = Array(teamSize).fill(null).map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const scrumMasters = Array(randomInt(0, 2)).fill(null).map(() => new ScrumMaster());\n    const testers = Array(randomInt(0, 2)).fill(null).map(() => new Tester());\n    const productOwners = Array(randomInt(0, 2)).fill(null).map(() => new ProductOwner());\n    const devs = Array(randomInt(0, 2)).fill(null).map(() => new Dev());\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n    console.log(this.candidates);\n    return this.candidates;\n  }\n\n}","map":{"version":3,"sources":["/Users/robhill/Projects/Pappa/cto-fantasy/src/modules/game/cto-fantasy/scenes/MainScene.js"],"names":["Phaser","Dev","ProductOwner","ScrumMaster","Tester","randomInt","MainScene","Scene","constructor","init","createStartingEmployees","candidates","createStartingCandidates","preload","create","console","log","employees","update","time","delta","teamSize","registry","get","startingTeamSize","Array","fill","map","scrumMasters","testers","productOwners","devs","flat"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,GAAT,EAAcC,YAAd,EAA4BC,WAA5B,EAAyCC,MAAzC,QAAuD,qBAAvD;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,OAAO,MAAMC,SAAN,SAAwBN,MAAM,CAACO,KAA/B,CAAqC;AAC1CC,EAAAA,WAAW,GAAG;AACZ,UAAM,WAAN;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,SAAKC,uBAAL;AACA,SAAKC,UAAL,GAAkB,KAAKC,wBAAL,EAAlB;AACD,GARyC,CAU1C;;;AACAC,EAAAA,OAAO,GAAG,CACR;AACA;AACD,GAdyC,CAgB1C;;;AACAC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,SAAjB;AACD;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc,CAAE;;AAEtBV,EAAAA,uBAAuB,GAAG;AACxB,UAAMW,QAAQ,GAAG,KAAKC,QAAL,CAAcC,GAAd,CAAkB,UAAlB,EAA8BC,gBAA/C;AACA,SAAKP,SAAL,GAAiBQ,KAAK,CAACJ,QAAD,CAAL,CACdK,IADc,CACT,IADS,EAEdC,GAFc,CAEV,MAAM,IAAI1B,GAAJ,EAFI,CAAjB;AAGD;;AAEDW,EAAAA,wBAAwB,GAAG;AACzB,UAAMgB,YAAY,GAAGH,KAAK,CAACpB,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAV,CAAL,CAClBqB,IADkB,CACb,IADa,EAElBC,GAFkB,CAEd,MAAM,IAAIxB,WAAJ,EAFQ,CAArB;AAGA,UAAM0B,OAAO,GAAGJ,KAAK,CAACpB,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAV,CAAL,CACbqB,IADa,CACR,IADQ,EAEbC,GAFa,CAET,MAAM,IAAIvB,MAAJ,EAFG,CAAhB;AAGA,UAAM0B,aAAa,GAAGL,KAAK,CAACpB,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAV,CAAL,CACnBqB,IADmB,CACd,IADc,EAEnBC,GAFmB,CAEf,MAAM,IAAIzB,YAAJ,EAFS,CAAtB;AAGA,UAAM6B,IAAI,GAAGN,KAAK,CAACpB,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAV,CAAL,CACVqB,IADU,CACL,IADK,EAEVC,GAFU,CAEN,MAAM,IAAI1B,GAAJ,EAFA,CAAb;AAGA,SAAKU,UAAL,GAAkB,CAACiB,YAAD,EAAeC,OAAf,EAAwBC,aAAxB,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAlB;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,UAAjB;AACA,WAAO,KAAKA,UAAZ;AACD;;AA9CyC","sourcesContent":["import Phaser from \"phaser\";\nimport { Dev, ProductOwner, ScrumMaster, Tester } from \"../classes/Employee\";\nimport { randomInt } from \"../utils/random\";\n\nexport class MainScene extends Phaser.Scene {\n  constructor() {\n    super(\"MainScene\");\n  }\n\n  init() {\n    this.createStartingEmployees();\n    this.candidates = this.createStartingCandidates();\n  }\n\n  // load assets\n  preload() {\n    // this.load.image(\"background\", \"assets/images/background-city.png\");\n    // this.load.audio(\"treeAudio\", \"assets/audio/arbol.mp3\");\n  }\n\n  // executed once, after assets were loaded\n  create() {\n    console.log(this.employees);\n  }\n\n  update(time, delta) {}\n\n  createStartingEmployees() {\n    const teamSize = this.registry.get(\"settings\").startingTeamSize;\n    this.employees = Array(teamSize)\n      .fill(null)\n      .map(() => new Dev());\n  }\n\n  createStartingCandidates() {\n    const scrumMasters = Array(randomInt(0, 2))\n      .fill(null)\n      .map(() => new ScrumMaster());\n    const testers = Array(randomInt(0, 2))\n      .fill(null)\n      .map(() => new Tester());\n    const productOwners = Array(randomInt(0, 2))\n      .fill(null)\n      .map(() => new ProductOwner());\n    const devs = Array(randomInt(0, 2))\n      .fill(null)\n      .map(() => new Dev());\n    this.candidates = [scrumMasters, testers, productOwners, devs].flat();\n    console.log(this.candidates);\n    return this.candidates;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}