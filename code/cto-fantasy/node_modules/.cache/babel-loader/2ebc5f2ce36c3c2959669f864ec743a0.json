{"ast":null,"code":"import Phaser from \"phaser\";\nimport { LinearFSM } from \"../classes/states/LinearFSM\";\nimport { SprintEventState } from \"../classes/states/sprint/SprintEventState\";\nimport * as theme from \"../theme\";\nimport { randomInt } from \"../utils/random\";\nexport class SprintScene extends Phaser.Scene {\n  constructor() {\n    super(\"SprintScene\");\n  }\n\n  init() {}\n\n  preload() {}\n\n  create({\n    team,\n    events = [],\n    onClose\n  }) {\n    this.team = team;\n    this.events = events;\n    this.onClose = onClose;\n    this.updateSprintNumber();\n    this.createComponents();\n    this.createEvents();\n  }\n\n  update(time, delta) {\n    if (!this.events.length) {//this.onClose();\n    }\n  }\n\n  updateSprintNumber() {\n    this.sprintNumber = this.registry.inc(\"sprintNumber\").get(\"sprintNumber\");\n    console.log(\"this.sprintNumber\", this.sprintNumber);\n  }\n\n  createComponents() {\n    this.header = this.add.text(400, 15, `Sprint ${this.sprintNumber}`, theme.h1).setOrigin(0.5, 0);\n    this.eventDialog = this.add.dom(400, 300).createFromCache(\"event\").setOrigin(0.5).setVisible(false);\n  }\n\n  createEvents() {\n    this.fsm = new LinearFSM();\n    this.events = Array(randomInt(1, 3)).fill(null).map(() => ({\n      text: \"Do you want to do A or B?\",\n      A: () => {\n        this.handleEvents();\n      },\n      B: () => {\n        this.handleEvents();\n      }\n    })).map(ev => new SprintEventState(this.fsm, this.eventDialog, ev));\n    this.fsm.add(this.events);\n    this.fsm.next();\n  }\n\n  handleEvents() {\n    this.fsm.next();\n\n    if (!this.fsm.currentState) {\n      this.onClose();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/robhill/Projects/Pappa/cto-fantasy/src/modules/game/cto-fantasy/scenes/SprintScene.js"],"names":["Phaser","LinearFSM","SprintEventState","theme","randomInt","SprintScene","Scene","constructor","init","preload","create","team","events","onClose","updateSprintNumber","createComponents","createEvents","update","time","delta","length","sprintNumber","registry","inc","get","console","log","header","add","text","h1","setOrigin","eventDialog","dom","createFromCache","setVisible","fsm","Array","fill","map","A","handleEvents","B","ev","next","currentState"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,gBAAT,QAAiC,2CAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,OAAO,MAAMC,WAAN,SAA0BL,MAAM,CAACM,KAAjC,CAAuC;AAC5CC,EAAAA,WAAW,GAAG;AACZ,UAAM,aAAN;AACD;;AAEDC,EAAAA,IAAI,GAAG,CAAE;;AAETC,EAAAA,OAAO,GAAG,CAAE;;AAEZC,EAAAA,MAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAM,GAAG,EAAjB;AAAqBC,IAAAA;AAArB,GAAD,EAAiC;AACrC,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,kBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,YAAL;AACD;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc;AAClB,QAAI,CAAC,KAAKP,MAAL,CAAYQ,MAAjB,EAAyB,CACvB;AACD;AACF;;AAEDN,EAAAA,kBAAkB,GAAG;AACnB,SAAKO,YAAL,GAAoB,KAAKC,QAAL,CAAcC,GAAd,CAAkB,cAAlB,EAAkCC,GAAlC,CAAsC,cAAtC,CAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,KAAKL,YAAtC;AACD;;AAEDN,EAAAA,gBAAgB,GAAG;AACjB,SAAKY,MAAL,GAAc,KAAKC,GAAL,CACXC,IADW,CACN,GADM,EACD,EADC,EACI,UAAS,KAAKR,YAAa,EAD/B,EACkClB,KAAK,CAAC2B,EADxC,EAEXC,SAFW,CAED,GAFC,EAEI,CAFJ,CAAd;AAGA,SAAKC,WAAL,GAAmB,KAAKJ,GAAL,CAChBK,GADgB,CACZ,GADY,EACP,GADO,EAEhBC,eAFgB,CAEA,OAFA,EAGhBH,SAHgB,CAGN,GAHM,EAIhBI,UAJgB,CAIL,KAJK,CAAnB;AAKD;;AAEDnB,EAAAA,YAAY,GAAG;AACb,SAAKoB,GAAL,GAAW,IAAInC,SAAJ,EAAX;AACA,SAAKW,MAAL,GAAcyB,KAAK,CAACjC,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAV,CAAL,CACXkC,IADW,CACN,IADM,EAEXC,GAFW,CAEP,OAAO;AACVV,MAAAA,IAAI,EAAE,2BADI;AAEVW,MAAAA,CAAC,EAAE,MAAM;AACP,aAAKC,YAAL;AACD,OAJS;AAKVC,MAAAA,CAAC,EAAE,MAAM;AACP,aAAKD,YAAL;AACD;AAPS,KAAP,CAFO,EAWXF,GAXW,CAWNI,EAAD,IAAQ,IAAIzC,gBAAJ,CAAqB,KAAKkC,GAA1B,EAA+B,KAAKJ,WAApC,EAAiDW,EAAjD,CAXD,CAAd;AAYA,SAAKP,GAAL,CAASR,GAAT,CAAa,KAAKhB,MAAlB;AACA,SAAKwB,GAAL,CAASQ,IAAT;AACD;;AAEDH,EAAAA,YAAY,GAAG;AACb,SAAKL,GAAL,CAASQ,IAAT;;AACA,QAAI,CAAC,KAAKR,GAAL,CAASS,YAAd,EAA4B;AAC1B,WAAKhC,OAAL;AACD;AACF;;AA/D2C","sourcesContent":["import Phaser from \"phaser\";\nimport { LinearFSM } from \"../classes/states/LinearFSM\";\nimport { SprintEventState } from \"../classes/states/sprint/SprintEventState\";\nimport * as theme from \"../theme\";\nimport { randomInt } from \"../utils/random\";\n\nexport class SprintScene extends Phaser.Scene {\n  constructor() {\n    super(\"SprintScene\");\n  }\n\n  init() {}\n\n  preload() {}\n\n  create({ team, events = [], onClose }) {\n    this.team = team;\n    this.events = events;\n    this.onClose = onClose;\n    this.updateSprintNumber();\n    this.createComponents();\n    this.createEvents();\n  }\n\n  update(time, delta) {\n    if (!this.events.length) {\n      //this.onClose();\n    }\n  }\n\n  updateSprintNumber() {\n    this.sprintNumber = this.registry.inc(\"sprintNumber\").get(\"sprintNumber\");\n    console.log(\"this.sprintNumber\", this.sprintNumber);\n  }\n\n  createComponents() {\n    this.header = this.add\n      .text(400, 15, `Sprint ${this.sprintNumber}`, theme.h1)\n      .setOrigin(0.5, 0);\n    this.eventDialog = this.add\n      .dom(400, 300)\n      .createFromCache(\"event\")\n      .setOrigin(0.5)\n      .setVisible(false);\n  }\n\n  createEvents() {\n    this.fsm = new LinearFSM();\n    this.events = Array(randomInt(1, 3))\n      .fill(null)\n      .map(() => ({\n        text: \"Do you want to do A or B?\",\n        A: () => {\n          this.handleEvents();\n        },\n        B: () => {\n          this.handleEvents();\n        },\n      }))\n      .map((ev) => new SprintEventState(this.fsm, this.eventDialog, ev));\n    this.fsm.add(this.events);\n    this.fsm.next();\n  }\n\n  handleEvents() {\n    this.fsm.next();\n    if (!this.fsm.currentState) {\n      this.onClose();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}