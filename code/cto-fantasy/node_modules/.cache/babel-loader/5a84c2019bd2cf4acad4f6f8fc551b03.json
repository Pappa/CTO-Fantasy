{"ast":null,"code":"import Phaser from \"phaser\";\nimport { JobOffer } from \"../classes/JobOffer\";\nimport { Row } from \"phaser-ui-tools\";\nimport * as theme from \"../theme\";\nexport class VacanciesScene extends Phaser.Scene {\n  constructor() {\n    super(\"VacanciesScene\");\n  }\n\n  init() {}\n\n  preload() {} // executed once, after assets were loaded\n\n\n  create() {\n    const name = this.registry.get(\"name\");\n    this.welcomeMessage = this.add.text(400, 30, `${name}, you have 3 job offers!`, theme.h1).setOrigin(0.5, 0);\n    this.createCompanyVacancies();\n  }\n\n  update(time, delta) {}\n\n  createCompanyVacancies() {\n    const companies = Phaser.Math.RND.shuffle(this.registry.get(\"settings\").companies).slice(0, 3); // this.companies = companies.map((company, idx) => {\n    //   const x = 50 + (idx + 1) * 175;\n    //   return this.add.existing(\n    //     new JobOffer(this, x, 150, company, this.startGame.bind(this))\n    //   );\n    // }, this);\n    //this.example = new Example(this);\n\n    const row = new Row(this, 400, 200);\n    companies.forEach((company, idx) => {\n      const x = 50 + (idx + 1) * 175;\n      row.addNode(new JobOffer(this, x, 150, company, this.startGame.bind(this)));\n    }, this);\n  }\n\n  startGame(company) {\n    this.registry.set(\"company\", company);\n    this.scene.start(\"MainScene\");\n  }\n\n}","map":{"version":3,"sources":["/Users/robhill/Projects/Pappa/cto-fantasy/src/modules/game/cto-fantasy/scenes/VacanciesScene.js"],"names":["Phaser","JobOffer","Row","theme","VacanciesScene","Scene","constructor","init","preload","create","name","registry","get","welcomeMessage","add","text","h1","setOrigin","createCompanyVacancies","update","time","delta","companies","Math","RND","shuffle","slice","row","forEach","company","idx","x","addNode","startGame","bind","set","scene","start"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AAEA,OAAO,MAAMC,cAAN,SAA6BJ,MAAM,CAACK,KAApC,CAA0C;AAC/CC,EAAAA,WAAW,GAAG;AACZ,UAAM,gBAAN;AACD;;AAEDC,EAAAA,IAAI,GAAG,CAAE;;AAETC,EAAAA,OAAO,GAAG,CAAE,CAPmC,CAS/C;;;AACAC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG,KAAKC,QAAL,CAAcC,GAAd,CAAkB,MAAlB,CAAb;AACA,SAAKC,cAAL,GAAsB,KAAKC,GAAL,CACnBC,IADmB,CACd,GADc,EACT,EADS,EACJ,GAAEL,IAAK,0BADH,EAC8BP,KAAK,CAACa,EADpC,EAEnBC,SAFmB,CAET,GAFS,EAEJ,CAFI,CAAtB;AAGA,SAAKC,sBAAL;AACD;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc,CAAE;;AAEtBH,EAAAA,sBAAsB,GAAG;AACvB,UAAMI,SAAS,GAAGtB,MAAM,CAACuB,IAAP,CAAYC,GAAZ,CAAgBC,OAAhB,CAChB,KAAKd,QAAL,CAAcC,GAAd,CAAkB,UAAlB,EAA8BU,SADd,EAEhBI,KAFgB,CAEV,CAFU,EAEP,CAFO,CAAlB,CADuB,CAIvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMC,GAAG,GAAG,IAAIzB,GAAJ,CAAQ,IAAR,EAAc,GAAd,EAAmB,GAAnB,CAAZ;AACAoB,IAAAA,SAAS,CAACM,OAAV,CAAkB,CAACC,OAAD,EAAUC,GAAV,KAAkB;AAClC,YAAMC,CAAC,GAAG,KAAK,CAACD,GAAG,GAAG,CAAP,IAAY,GAA3B;AACAH,MAAAA,GAAG,CAACK,OAAJ,CACE,IAAI/B,QAAJ,CAAa,IAAb,EAAmB8B,CAAnB,EAAsB,GAAtB,EAA2BF,OAA3B,EAAoC,KAAKI,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAApC,CADF;AAGD,KALD,EAKG,IALH;AAMD;;AAEDD,EAAAA,SAAS,CAACJ,OAAD,EAAU;AACjB,SAAKlB,QAAL,CAAcwB,GAAd,CAAkB,SAAlB,EAA6BN,OAA7B;AACA,SAAKO,KAAL,CAAWC,KAAX,CAAiB,WAAjB;AACD;;AA3C8C","sourcesContent":["import Phaser from \"phaser\";\nimport { JobOffer } from \"../classes/JobOffer\";\nimport { Row } from \"phaser-ui-tools\";\nimport * as theme from \"../theme\";\n\nexport class VacanciesScene extends Phaser.Scene {\n  constructor() {\n    super(\"VacanciesScene\");\n  }\n\n  init() {}\n\n  preload() {}\n\n  // executed once, after assets were loaded\n  create() {\n    const name = this.registry.get(\"name\");\n    this.welcomeMessage = this.add\n      .text(400, 30, `${name}, you have 3 job offers!`, theme.h1)\n      .setOrigin(0.5, 0);\n    this.createCompanyVacancies();\n  }\n\n  update(time, delta) {}\n\n  createCompanyVacancies() {\n    const companies = Phaser.Math.RND.shuffle(\n      this.registry.get(\"settings\").companies\n    ).slice(0, 3);\n    // this.companies = companies.map((company, idx) => {\n    //   const x = 50 + (idx + 1) * 175;\n    //   return this.add.existing(\n    //     new JobOffer(this, x, 150, company, this.startGame.bind(this))\n    //   );\n    // }, this);\n    //this.example = new Example(this);\n    const row = new Row(this, 400, 200);\n    companies.forEach((company, idx) => {\n      const x = 50 + (idx + 1) * 175;\n      row.addNode(\n        new JobOffer(this, x, 150, company, this.startGame.bind(this))\n      );\n    }, this);\n  }\n\n  startGame(company) {\n    this.registry.set(\"company\", company);\n    this.scene.start(\"MainScene\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}